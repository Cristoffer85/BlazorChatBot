@page "/electricaldata"

<PageTitle>Electrical Data</PageTitle>

<h1>Electrical Data</h1>

<p>This component fetches monthly electricity demand and Generation from various sources (TWh) and from a total of 85 countries (not yet mapped in list) fetched from ember-energy.org.
<br><br>Start by typing your desired parameters in fields below and press button <strong>Fetch Data</strong> to receive your results.</p>

<div>
    <label for="entity">Entity (e.g., Sweden, Norway) or just doubleclick for list:</label>
    <input id="entity" @bind="entity" list="entityOptions" placeholder="Enter entity (e.g., Sweden)" />
    <datalist id="entityOptions">
        @foreach (var country in entityOptions)
        {
            <option value="@country"></option>
        }
    </datalist>

    <label for="startDate">Start Date (YYYY-MM):</label>
    <input id="startDate" @bind="startDate" placeholder="Enter start date (e.g., 2020-01)" />

    <label for="endDate">End Date (YYYY-MM):</label>
    <input id="endDate" @bind="endDate" placeholder="Enter end date (e.g., 2020-03)" />

    <button @onclick="FetchElectricalData">Fetch Data</button>
</div>

@if (isLoading)
{
    <p><em>Loading data...</em></p>
}
else if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}
else if (!hasFetchedData)
{
    <p></p>
}
else if (electricalData == null || !electricalData.Any())
{
    <p>No data available. Please try different parameters.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Entity</th>
                <th>Demand (TWh)</th>
                <th>Series</th>
                <th>Generation (TWh)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in electricalData.GroupBy(d => d.Date.ToString("yyyy-MM")))
            {
                // Render the month header row
                <tr class="table-primary">
                    <td>@group.First().Date.ToShortDateString()</td>
                    <td>@group.First().Entity</td>
                    <td>@group.First().DemandTWh</td>
                    <td colspan="2">Generation Details:</td>
                </tr>

                // Filter and transform the data
                var filteredData = group
                    .Where(

                        d => d.Series != "Clean" 
                     && d.Series != "Hydro, bioenergy and other renewables" 
                     && d.Series != "Renewables"
                     && d.Series != "Wind and solar"
                     && d.Series != "Other renewables"
                     && d.Series != "Other fossil"
                    
                    )
                    .ToList();

                // Ensure "Fossil" and "Solar" are included, even if their values are 0
                if (!filteredData.Any(d => d.Series == "Fossil"))
                {
                    filteredData.Add(new ElectricalData
                    {
                        Series = "Fossil",
                        GenerationTWh = 0,
                        Date = group.First().Date,
                        Entity = group.First().Entity
                    });
                }

                if (!filteredData.Any(d => d.Series == "Solar"))
                {
                    filteredData.Add(new ElectricalData
                    {
                        Series = "Solar",
                        GenerationTWh = 0,
                        Date = group.First().Date,
                        Entity = group.First().Entity
                    });
                }

                // Render the filtered and transformed rows
                foreach (var data in filteredData.Where(d => d.Series != "Total generation" && d.Series != "Net imports"))
                {
                    <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td>@data.Series</td>
                        <td>@data.GenerationTWh</td>
                    </tr>
                }

                // Render the "Total generation" row with a light gray background
                var totalGeneration = group.FirstOrDefault(d => d.Series == "Total generation");
                if (totalGeneration != null)
                {
                    <tr style="background-color: lightgray;">
                        <td></td>
                        <td></td>
                        <td></td>
                        <td><strong>@totalGeneration.Series</strong></td>
                        <td><strong>@totalGeneration.GenerationTWh</strong></td>
                    </tr>
                }

                // Render the "Net imports" row with a slightly darker gray background
                var netImports = group.FirstOrDefault(d => d.Series == "Net imports");
                if (netImports != null)
                {
                    <tr style="background-color: darkgray;">
                        <td></td>
                        <td></td>
                        <td></td>
                        <td><strong>@netImports.Series</strong></td>
                        <td><strong>@netImports.GenerationTWh</strong></td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@using BlazorAIChatBot.Shared.Models
@inject HttpClient Http
@code {
    private string entity = "Sweden"; // Default entity
    private string startDate = "2020-01"; // Default start date
    private string endDate = "2020-03"; // Default end date
    private string? selectedSeries = null; // Selected series filter
    private bool isLoading = false;
    private string? errorMessage = null;
    private bool hasFetchedData = false; // New flag to track if data has been fetched
    private List<ElectricalData> electricalData = new();
    private List<string> entityOptions = new()
    {
        "Afghanistan", "Africa", "Albania", "Algeria", "American Samoa", "Angola", "Antigua and Barbuda",
        "Argentina", "Armenia", "Aruba", "ASEAN", "Asia", "Australia", "Austria", "Azerbaijan", "Bahamas",
        "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bhutan", "Bolivia",
        "Bosnia Herzegovina", "Botswana", "Brazil", "Brunei Darussalam", "Bulgaria", "Burkina Faso", "Burundi",
        "Cabo Verde", "Cambodia", "Cameroon", "Canada", "Cayman Islands", "Central African Republic", "Chad",
        "Chile", "China", "Colombia", "Comoros", "Congo", "Congo (DRC)", "Cook Islands (the)", "Costa Rica",
        "Cote d'Ivoire", "Croatia", "Cuba", "Cyprus", "Czechia", "Denmark", "Djibouti", "Dominica",
        "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia",
        "Eswatini", "Ethiopia", "EU", "Europe", "Falkland Islands [Malvinas]", "Faroe Islands", "Fiji",
        "Finland", "France", "French Guiana", "French Polynesia", "G20", "G7", "Gabon", "Gambia", "Georgia",
        "Germany", "Ghana", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guinea",
        "Guinea-Bissau", "Guyana", "Haiti", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia",
        "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya",
        "Kiribati", "Kosovo", "Kuwait", "Kyrgyzstan", "Lao", "Latin America and Caribbean", "Latvia", "Lebanon",
        "Lesotho", "Liberia", "Libya", "Lithuania", "Luxembourg", "Macao", "Madagascar", "Malawi", "Malaysia",
        "Maldives", "Mali", "Malta", "Martinique", "Mauritania", "Mauritius", "Mexico", "Middle East", "Moldova",
        "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal",
        "Netherlands", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "North America",
        "North Korea", "North Macedonia", "Norway", "Oceania", "OECD", "Oman", "Pakistan", "Palestine, State of",
        "Panama", "Papua New Guinea", "Paraguay", "Peru", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion",
        "Romania", "Russia", "Rwanda", "Saint Kitts and Nevis", "Saint Lucia", "Saint Pierre and Miquelon",
        "Saint Vincent and the Grenadines", "Samoa", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Serbia",
        "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia",
        "South Africa", "South Korea", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname", "Sweden",
        "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania, the United Republic of", "Thailand",
        "The Philippines", "Togo", "Tonga", "Trinidad and Tobago", "Tunisia", "Türkiye", "Turkmenistan",
        "Turks and Caicos Islands", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States",
        "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Viet Nam", "Virgin Islands (British)",
        "Virgin Islands (U.S.)", "World", "Yemen", "Zambia"
    };

    private async Task FetchElectricalData()
    {
        isLoading = true;
        errorMessage = null;
        electricalData.Clear();
        hasFetchedData = true; // Set the flag to true when the button is pressed

        try
        {
            // Call the server-side API with the selected series filter
            string apiUrl = $"api/ElectricalData/fetch?entity={entity}&startDate={startDate}&endDate={endDate}";
            if (!string.IsNullOrEmpty(selectedSeries))
            {
                apiUrl += $"&series={Uri.EscapeDataString(selectedSeries)}";
            }

            var response = await Http.GetAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<List<ElectricalData>>();
                if (responseData != null)
                {
                    electricalData = responseData;
                }
            }
            else
            {
                errorMessage = $"Failed to fetch data: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to fetch data. Please check your parameters or try again later.";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}