@page "/electricaldata"

<PageTitle>Electrical Data</PageTitle>

<h1>Electrical Data</h1>

<p>This component fetches monthly electricity demand and generation data from the server-side API.</p>

<div>
    <label for="entity">Entity (e.g., Sweden, Norway):</label>
    <input id="entity" @bind="entity" placeholder="Enter entity (e.g., Sweden)" />

    <label for="startDate">Start Date (YYYY-MM):</label>
    <input id="startDate" @bind="startDate" placeholder="Enter start date (e.g., 2020-01)" />

    <label for="endDate">End Date (YYYY-MM):</label>
    <input id="endDate" @bind="endDate" placeholder="Enter end date (e.g., 2020-03)" />

    <button @onclick="FetchElectricalData">Fetch Data</button>
</div>

@if (isLoading)
{
    <p><em>Loading data...</em></p>
}
else if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}
else if (electricalData == null || !electricalData.Any())
{
    <p>No data available. Please try different parameters.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Entity</th>
                <th>Demand (TWh)</th>
                <th>Series</th>
                <th>Generation (TWh)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in electricalData.GroupBy(d => d.Date.ToString("yyyy-MM")))
            {
                // Render the month header row
                <tr class="table-primary">
                    <td>@group.First().Date.ToShortDateString()</td>
                    <td>@group.First().Entity</td>
                    <td>@group.First().DemandTWh</td>
                    <td colspan="2">Generation Details:</td>
                </tr>

                // Filter and transform the data
                var filteredData = group
                    .Where(

                        d => d.Series != "Clean" 
                     && d.Series != "Hydro, bioenergy and other renewables" 
                     && d.Series != "Renewables"
                     && d.Series != "Wind and solar"
                     && d.Series != "Other renewables"
                     && d.Series != "Other fossil"
                    
                    )
                    .ToList();

                // Ensure "Fossil" and "Solar" are included, even if their values are 0
                if (!filteredData.Any(d => d.Series == "Fossil"))
                {
                    filteredData.Add(new ElectricalData
                    {
                        Series = "Fossil",
                        GenerationTWh = 0,
                        Date = group.First().Date,
                        Entity = group.First().Entity
                    });
                }

                if (!filteredData.Any(d => d.Series == "Solar"))
                {
                    filteredData.Add(new ElectricalData
                    {
                        Series = "Solar",
                        GenerationTWh = 0,
                        Date = group.First().Date,
                        Entity = group.First().Entity
                    });
                }

                // Render the filtered and transformed rows
                foreach (var data in filteredData.Where(d => d.Series != "Total generation" && d.Series != "Net imports"))
                {
                    <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td>@data.Series</td>
                        <td>@data.GenerationTWh</td>
                    </tr>
                }

                // Render the "Total generation" row with a light gray background
                var totalGeneration = group.FirstOrDefault(d => d.Series == "Total generation");
                if (totalGeneration != null)
                {
                    <tr style="background-color: lightgray;">
                        <td></td>
                        <td></td>
                        <td></td>
                        <td><strong>@totalGeneration.Series</strong></td>
                        <td><strong>@totalGeneration.GenerationTWh</strong></td>
                    </tr>
                }

                // Render the "Net imports" row with a slightly darker gray background
                var netImports = group.FirstOrDefault(d => d.Series == "Net imports");
                if (netImports != null)
                {
                    <tr style="background-color: darkgray;">
                        <td></td>
                        <td></td>
                        <td></td>
                        <td><strong>@netImports.Series</strong></td>
                        <td><strong>@netImports.GenerationTWh</strong></td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@using BlazorAIChatBot.Shared.Models
@inject HttpClient Http

@code {
    private string entity = "Sweden"; // Default entity
    private string startDate = "2020-01"; // Default start date
    private string endDate = "2020-03"; // Default end date
    private string? selectedSeries = null; // Selected series filter
    private bool isLoading = false;
    private string? errorMessage = null;

    private List<ElectricalData> electricalData = new();

    private async Task FetchElectricalData()
    {
        isLoading = true;
        errorMessage = null;
        electricalData.Clear();

        try
        {
            // Call the server-side API with the selected series filter
            string apiUrl = $"api/ElectricalData/fetch?entity={entity}&startDate={startDate}&endDate={endDate}";
            if (!string.IsNullOrEmpty(selectedSeries))
            {
                apiUrl += $"&series={Uri.EscapeDataString(selectedSeries)}";
            }

            var response = await Http.GetAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<List<ElectricalData>>();
                if (responseData != null)
                {
                    electricalData = responseData;
                }
            }
            else
            {
                errorMessage = $"Failed to fetch data: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to fetch data. Please check your parameters or try again later.";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}